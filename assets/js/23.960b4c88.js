(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{478:function(s,a,t){"use strict";t.r(a);var n=t(2),e=Object(n.a)({},(function(){var s=this,a=s._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h2",{attrs:{id:"语法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#语法"}},[s._v("#")]),s._v(" 语法")]),s._v(" "),a("h3",{attrs:{id:"小细节"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#小细节"}},[s._v("#")]),s._v(" 小细节")]),s._v(" "),a("ol",[a("li",[s._v("iostream是没有.h 其它的头文件   这是c99标准")]),s._v(" "),a("li",[s._v("命名空间 namespace")]),s._v(" "),a("li",[s._v("cout 输出 double类型需要跟showpoint "),a("code",[s._v("cout << showpoint << a;")])])]),s._v(" "),a("h3",{attrs:{id:"c"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#c"}},[s._v("#")]),s._v(" C")]),s._v(" "),a("p",[s._v("bool是c++里面，c里面没有bool类型\n引用是c++才有的，c没有但是可以直接用指针，指针占用内存，引用只是形象没有占用内存\nprintf 和 scanf对应的类型打印\n%s -- string （字符数组）\n%d -- int\n%lf -- double\n%c --char")]),s._v(" "),a("h5",{attrs:{id:"指针和应用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#指针和应用"}},[s._v("#")]),s._v(" 指针和应用")]),s._v(" "),a("p",[s._v("​    &是取地址符号,引用就是定义一个&p\n​    指针是指向元素的内存地址\n​    指针变量可以理解为在内存中开辟出来存放其他地址值的东西，可以修改它改变地址\n​    代码：")]),s._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[s._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("include")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("<stdio.h>")]),s._v(" ")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" main\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("m"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("printf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"i是：%d\\n"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("printf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"m是：%d\\n"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("m"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("printf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"*m是:%d\\n"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("m"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br")])]),a("p",[s._v("​    结果：\n​    i是：10\n​    m是：6422036\n​    *m是:10\n​    定义的指针变量是m")]),s._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[s._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("define")]),a("span",{pre:!0,attrs:{class:"token expression"}},[s._v("宏定义")])]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("typedef")]),s._v(" 类型  字符串"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("可以修改一些类型的名称"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n就是把某一个类型定义为字符串的名字\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[s._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("include")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("<stdio.h>")])]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("typedef")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" Age"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    Age a"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("11")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("printf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"年龄是：%d"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br")])]),a("h5",{attrs:{id:"结构体和molloc"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#结构体和molloc"}},[s._v("#")]),s._v(" 结构体和Molloc")]),s._v(" "),a("p",[s._v("结构体\n结构体就像一个抽象的个体，就像一类东西,就像c++的空间名\n结构体是我们可以自定义的类型，结构体的数据位宽是一个复杂的计算 过程。面试常考")]),s._v(" "),a("div",{staticClass:"language-C line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[s._v("    实例\n    "),a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[s._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("include")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("<stdio.h>")])]),s._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[s._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("define")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token macro-name"}},[s._v("MAXSIZE")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token expression"}},[a("span",{pre:!0,attrs:{class:"token number"}},[s._v("50")])])]),s._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("typedef")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" \n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* data */")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("char")]),s._v(" name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//姓名")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" age"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//年龄")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("double")]),s._v(" high"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//身高")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" Preson"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("PPreson"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("Presons"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("MAXSIZE"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    \n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        Preson p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//就是定义了这个结构体类型的变量")]),s._v("\n        PPreson p1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//跟*p1一样")]),s._v("\n        Presons ps"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//就是定义了这个结构体类型的数组")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br")])]),a("div",{staticClass:"language-C line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 访问结构体")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[s._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("include")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("<stdio.h>")])]),s._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[s._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("define")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token macro-name"}},[s._v("MAXSIZE")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token expression"}},[a("span",{pre:!0,attrs:{class:"token number"}},[s._v("50")])])]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//结构体1")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/*\n    typedef struct \n    {\n        \n        char name;//姓名\n        int age;//年龄\n        double high;//身高\n    } Preson,*PPreson,Presons[MAXSIZE];\n    */")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//结构体2 属性用到了结构体本身")]),s._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("typedef")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Preson")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* data */")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Preson")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("mate"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//配偶")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("char")]),s._v(" name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//姓名")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" age"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//年龄")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("double")]),s._v(" high"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//身高")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" Preson"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("PPreson"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("Presons"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("MAXSIZE"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n     "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        Preson p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//就是定义了这个结构体类型的变量")]),s._v("\n        PPreson p1"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v("p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//跟*p1一样")]),s._v("\n        Presons ps"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//就是定义了这个结构体类型的数组")]),s._v("\n\n        p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("name"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token char"}},[s._v("'a'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//普通的访问")]),s._v("\n        p1"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),s._v("name"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token char"}},[s._v("'b'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//指针的访问")]),s._v("\n        ps"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("age"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//数组访问")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("printf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"a的名字是:%c\\n"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("printf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"b的名字是:%c\\n"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("p1"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),s._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("printf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"p[0]的年龄是:%d\\n"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("ps"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("age"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n        Preson q1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//定义两个结构")]),s._v("\n        Preson q2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        q1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("age"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        q2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("age"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("9")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n        q1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("mate"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v("q2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        q2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("mate"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v("q1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("printf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"q1的age：%d\\n"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("q1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("age"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("printf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"q1的mate的age：%d\\n"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("q1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("mate"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),s._v("age"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br"),a("span",{staticClass:"line-number"},[s._v("37")]),a("br"),a("span",{staticClass:"line-number"},[s._v("38")]),a("br"),a("span",{staticClass:"line-number"},[s._v("39")]),a("br"),a("span",{staticClass:"line-number"},[s._v("40")]),a("br"),a("span",{staticClass:"line-number"},[s._v("41")]),a("br"),a("span",{staticClass:"line-number"},[s._v("42")]),a("br"),a("span",{staticClass:"line-number"},[s._v("43")]),a("br"),a("span",{staticClass:"line-number"},[s._v("44")]),a("br"),a("span",{staticClass:"line-number"},[s._v("45")]),a("br"),a("span",{staticClass:"line-number"},[s._v("46")]),a("br"),a("span",{staticClass:"line-number"},[s._v("47")]),a("br"),a("span",{staticClass:"line-number"},[s._v("48")]),a("br"),a("span",{staticClass:"line-number"},[s._v("49")]),a("br")])]),a("p",[s._v("malloc和free（指针）\nmalloc是可以自主的申请内存（是一片连续的存储空间）\n定义形式：类型 *变量名=（类型 *）malloc（sizeof（类型）字节数）\nfree就是释放申请的内存空间\n定义形式：（c要引用stdlib.h）")]),s._v(" "),a("h5",{attrs:{id:"三目运算"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#三目运算"}},[s._v("#")]),s._v(" 三目运算")]),s._v(" "),a("p",[s._v("​    A?T:F;就是if else的简化")]),s._v(" "),a("h5",{attrs:{id:"函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#函数"}},[s._v("#")]),s._v(" 函数")]),s._v(" "),a("p",[s._v("​    对功能进行封装\n​    返回类型 函数名（参数）{")]),s._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[s._v("}\n可以通过&将函数的形参和实参同步，就是统一地址\n返回多个数值，可以通过指针\n")])])]),a("h5",{attrs:{id:"递归-函数套娃-无论是直接的调用自己还是间接"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#递归-函数套娃-无论是直接的调用自己还是间接"}},[s._v("#")]),s._v(" 递归（函数套娃，无论是直接的调用自己还是间接）")]),s._v(" "),a("p",[s._v("​    1、同类型问题\n​    2、确定终止条件\n​    3、汇聚成更大的问题，直到原问题\n​    示例:")]),s._v(" "),a("div",{staticClass:"language-C line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[s._v("  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("jeicheng")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("a "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("||")]),s._v(" a"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("jeicheng")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("a"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" \n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\t\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("printf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"a的阶乘是：%d"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("eicheng")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br")])]),a("h5",{attrs:{id:"动态数组"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#动态数组"}},[s._v("#")]),s._v(" 动态数组")]),s._v(" "),a("p",[s._v("​    错误写法：\n​    int n;\n​    cin<<n;\n​    int array[n];\n​    正确写法："),a("strong",[s._v("(通过malloc实现,通过访问数组名和下标访问，还可以通过解引用)")])]),s._v(" "),a("h5",{attrs:{id:"if-for-while如果没有"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#if-for-while如果没有"}},[s._v("#")]),s._v(" if for while如果没有{}")]),s._v(" "),a("p",[s._v("就是他的下面的第一句或者是一个整体的if for while为{}内")]),s._v(" "),a("h3",{attrs:{id:"常识"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#常识"}},[s._v("#")]),s._v(" 常识")]),s._v(" "),a("ul",[a("li",[a("strong",[s._v("栈：")]),s._v(" 在函数内部声明的所有变量都将占用栈内存。")]),s._v(" "),a("li",[a("strong",[s._v("堆：")]),s._v(" 这是程序中未使用的内存，在程序运行时可用于动态分配内存\nconst 的问题，在gcc中是可以通过指针区修改的，但是在g++编译是不能修改的")])]),s._v(" "),a("h2",{attrs:{id:"c-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#c-2"}},[s._v("#")]),s._v(" c++")]),s._v(" "),a("h4",{attrs:{id:"面向对象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#面向对象"}},[s._v("#")]),s._v(" 面向对象")]),s._v(" "),a("p",[s._v("类的定义方式和成员函数")]),s._v(" "),a("div",{staticClass:"language-c++ line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("class Box{\n    public:\n        // 属性\n        double length;\n        double withd;\n        // 声明成员函数 也可以在这里定义函数（方法）\n        double get_length(void);\n        double get_withd(void);\n        double area(void);\n        void set(double len,double wth);\n};\n// 定义成员函数\ndouble Box::get_length(void){\n    return length;\n}\ndouble Box::get_withd(void){\n    return withd;\n}\ndouble Box::area(void){\n    return length * withd;\n}\nvoid Box::set(double len,double wth){\n    length = len;\n    withd = wth;\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br")])]),a("h5",{attrs:{id:"注意-私有的成员和受保护的成员不能使用直接成员访问运算符-来直接访问"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#注意-私有的成员和受保护的成员不能使用直接成员访问运算符-来直接访问"}},[s._v("#")]),s._v(" 注意：私有的成员和受保护的成员不能使用直接成员访问运算符 (.) 来直接访问")]),s._v(" "),a("h5",{attrs:{id:"数据封装和数据抽象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数据封装和数据抽象"}},[s._v("#")]),s._v(" 数据封装和数据抽象")]),s._v(" "),a("p",[s._v("这种方式对数据可以保护和提供对外访问数据的接口")]),s._v(" "),a("p",[a("strong",[s._v("public、private、protected")]),s._v(" 称为访问修饰符 是对数据封装，防止函数直接访问数据")]),s._v(" "),a("p",[s._v("public -- 可以通过 . 和 成员函数的方式访问")]),s._v(" "),a("p",[s._v("private -- 只有类和友元函数可以访问 ，如没有给定会默认为次数据封装类型")]),s._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[s._v("所以一般的操作是这样的\n")])])]),a("div",{staticClass:"language-c++ line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("class Box{\n    private:\n         // 属性\n        double length;\n        double withd;\n\n    public:\n        // 声明成员函数\n        double get_length(void);\n        double get_withd(void);\n        double area(void);\n        void set(double len,double wth);\n};\n// 定义成员函数\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br")])]),a("p",[s._v("protected -- 一般是用在子类（派生类）访问的数据")]),s._v(" "),a("div",{staticClass:"language-c++ line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("\nclass Box\n{\n   protected:\n      double width;\n};\n \nclass SmallBox:Box // SmallBox 是派生类\n{\n   public:\n      void setSmallWidth( double wid );\n      double getSmallWidth( void );\n};\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br")])]),a("h5",{attrs:{id:"继承"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#继承"}},[s._v("#")]),s._v(" 继承")]),s._v(" "),a("p",[s._v("支持多重继承")]),s._v(" "),a("p",[s._v("有public, protected, private三种继承方式，它们相应地改变了基类成员的访问属性。")]),s._v(" "),a("ul",[a("li",[a("ol",[a("li",[a("strong",[s._v("public 继承：")]),s._v(" 基类 public 成员，protected 成员，private 成员的访问属性在派生类中分别变成：public, protected, private")])])]),s._v(" "),a("li",[a("ol",{attrs:{start:"2"}},[a("li",[a("strong",[s._v("protected 继承：")]),s._v(" 基类 public 成员，protected 成员，private 成员的访问属性在派生类中分别变成：protected, protected, private")])])]),s._v(" "),a("li",[a("ol",{attrs:{start:"3"}},[a("li",[a("strong",[s._v("private 继承：")]),s._v(" 基类 public 成员，protected 成员，private 成员的访问属性在派生类中分别变成：private, private, private")])])])]),s._v(" "),a("p",[s._v("但无论哪种继承方式，上面两点都没有改变：")]),s._v(" "),a("ul",[a("li",[s._v("1.private 成员只能被本类成员（类内）和友元访问，不能被派生类访问；")]),s._v(" "),a("li",[s._v("2.protected 成员可以被派生类访问。")])]),s._v(" "),a("h5",{attrs:{id:"构造函数和析构函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#构造函数和析构函数"}},[s._v("#")]),s._v(" 构造函数和析构函数")]),s._v(" "),a("p",[s._v("构造函数就是创建实例的时候会执行，这个和new关键字有关。")]),s._v(" "),a("p",[s._v("构造函数的名称与类的名称是完全相同的，并且不会返回任何类型，也不会返回 void，可以用于初始化，可以传参数，可以通过一个叫初始化字段。")]),s._v(" "),a("div",{staticClass:"language-c++ line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('class Box{\n    public:\n        double length;\n        double withd;\n        // 构造函数声明\n        Box(double len, double wth);\n\n};\nBox::Box(double len, double wth){\n    cout << "执行初始化的东西" << endl;\n    length = len;\n    withd = wth;\n}\n// 构造函数有参可以跟\nBox box(1.0, 2.0);\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br")])]),a("p",[a("strong",[s._v("析构函数")]),s._v("是类的一种特殊的成员函数，它会在每次删除所创建的对象时执行。应该是和销毁内存有关的东修")]),s._v(" "),a("p",[s._v("析构函数的名称与类的名称是完全相同的，只是在前面加了个波浪号（~）作为前缀，它不会返回任何值，也不能带有任何参数。析构函数有助于在跳出程序（比如关闭文件、释放内存等）前释放资源。")]),s._v(" "),a("div",{staticClass:"language-c++ line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('class Box{\n    public:\n        double length;\n        double withd;\n        // 构造函数声明\n        Box(double len, double wth);\n\t~Box();\n};\nBox::Box(double len, double wth){\n    cout << "执行初始化的东西" << endl;\n    length = len;\n    withd = wth;\n}\n// 构造函数有参可以跟\nBox box(1.0, 2.0);\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br")])]),a("p",[a("strong",[s._v("拷贝构造函数")]),s._v("是一种特殊的构造函数，它在创建对象时，是使用同一类中之前创建的对象来初始化新创建的对象。拷贝构造函数通常用于：")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("通过使用另一个同类型的对象来初始化新创建的对象。")])]),s._v(" "),a("li",[a("p",[s._v("复制对象把它作为参数传递给函数。")])]),s._v(" "),a("li",[a("p",[s._v("复制对象，并从函数返回这个对象。")]),s._v(" "),a("div",{staticClass:"language-c++ line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('class Line\n{\n   public:\n      int getLength( void );\n      Line( int len );             // 简单的构造函数\n      Line( const Line &obj);      // 拷贝构造函数\n      ~Line();                     // 析构函数\n\n   private:\n      int *ptr;\n};\n// 拷贝构造函数\nLine::Line(const Line &obj)\n{\n    cout << "调用拷贝构造函数并为指针 ptr 分配内存" << endl;\n    ptr = new int;\n    *ptr = *obj.ptr; // 拷贝值\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br")])])])]),s._v(" "),a("h5",{attrs:{id:"友元"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#友元"}},[s._v("#")]),s._v(" 友元")]),s._v(" "),a("p",[a("strong",[s._v("friend")]),s._v("关键字")]),s._v(" "),a("p",[s._v("这个可以是一个函数，也可以是一个类。")]),s._v(" "),a("p",[s._v("它是定义在类外的可以访问类的所有私有（private）成员和保护（protected）成员classBox")]),s._v(" "),a("h5",{attrs:{id:"内联函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#内联函数"}},[s._v("#")]),s._v(" 内联函数")]),s._v(" "),a("p",[s._v("它是通常与类一起使用。在编译时，编译器会把该函数的代码副本放置在每个调用该函数的地方。")]),s._v(" "),a("p",[s._v("对内联函数进行任何修改，都需要重新编译函数的所有客户端，因为编译器需要更换一次代码。")]),s._v(" "),a("p",[s._v("定义内联函数，需将关键字  "),a("strong",[s._v("inline")]),s._v(" ，在调用函数之前需要对函数进行定义。")]),s._v(" "),a("p",[s._v("在类定义中的定义的函数都是内联函数，即使没有使用 "),a("strong",[s._v("inline")]),s._v(" 说明符。")]),s._v(" "),a("h5",{attrs:{id:"this指针"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#this指针"}},[s._v("#")]),s._v(" this指针")]),s._v(" "),a("p",[s._v("使用的含义和其他语言的this相同")]),s._v(" "),a("p",[s._v("this -> fangfa()")]),s._v(" "),a("p",[s._v("每一个对象都能通过 "),a("strong",[s._v("this")]),s._v(" 指针来访问自己的地址。"),a("strong",[s._v("this")]),s._v(" 指针是所有成员函数的隐含参数。因此，在成员函数内部，它可以用来指向调用对象。")]),s._v(" "),a("p",[s._v("友元函数没有 "),a("strong",[s._v("this")]),s._v(" 指针，因为友元不是类的成员。只有成员函数才有 "),a("strong",[s._v("this")]),s._v(" 指针。")]),s._v(" "),a("p",[s._v("一个指向 C++ 类的指针与指向结构的指针类似，访问指向类的指针的成员，需要使用成员访问运算符  "),a("strong",[s._v("->")]),s._v(" ，就像访问指向结构的指针一样。与所有的指针一样，您必须在使用指针之前，对指针进行初始化。")]),s._v(" "),a("h5",{attrs:{id:"重载函数和运算符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#重载函数和运算符"}},[s._v("#")]),s._v(" 重载函数和运算符")]),s._v(" "),a("p",[s._v("这个机制是在同一个作用域下定义了同名的函数或是运用同样的运算符号，但是所跟的参数有区别时，C++会根据你调用时所跟的实参数匹配对应最合适的定义。这个选择的过程称为"),a("strong",[s._v("重载决策")])]),s._v(" "),a("div",{staticClass:"language-c++ line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('class Text {\n    public:\n        void printNum(int num);\n        void printNum(double num);\n\n};\nvoid Text::printNum(int num){\n    cout << "ouput int is " << num << endl;\n}\nvoid Text::printNum(double num){\n    cout << "output double is" << showpoint  << num << endl;\n}\n\n// 主函数\n    Text t;\n    t.printNum(1);  //  ouput int is 1\n    t.printNum(2.0); // output double is2.00000\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br")])]),a("p",[s._v("运算符号重载和理解的有所不同，看这个例子可以很好理解。不是所有的运算符都可以重载")]),s._v(" "),a("div",{staticClass:"language-c++ line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("class Box\n{\n   public:\n \n      double getVolume(void)\n      {\n         return length * breadth * height;\n      }\n      void setLength( double len )\n      {\n          length = len;\n      }\n \n      void setBreadth( double bre )\n      {\n          breadth = bre;\n      }\n \n      void setHeight( double hei )\n      {\n          height = hei;\n      }\n      // 重载 + 运算符，用于把两个 Box 对象相加\n      Box operator+(const Box& b)\n      {\n         Box box;\n         box.length = this->length + b.length;\n         box.breadth = this->breadth + b.breadth;\n         box.height = this->height + b.height;\n         return box;\n      }\n   private:\n      double length;      // 长度\n      double breadth;     // 宽度\n      double height;      // 高度\n};\n\n// 主函数\n   Box Box1;                // 声明 Box1，\n   Box Box2;                // 声明 Box2，\n   Box Box3;                // 声明 Box3，\n   // 给1 2赋值\n   // 可以通过运算符重载将+的功能变为两个对象相加1 2 赋给3可以得到新的实例\n   Box3 = Box1 + Box2; // 此时的Box3的属性是前两个的和\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br"),a("span",{staticClass:"line-number"},[s._v("37")]),a("br"),a("span",{staticClass:"line-number"},[s._v("38")]),a("br"),a("span",{staticClass:"line-number"},[s._v("39")]),a("br"),a("span",{staticClass:"line-number"},[s._v("40")]),a("br"),a("span",{staticClass:"line-number"},[s._v("41")]),a("br"),a("span",{staticClass:"line-number"},[s._v("42")]),a("br"),a("span",{staticClass:"line-number"},[s._v("43")]),a("br"),a("span",{staticClass:"line-number"},[s._v("44")]),a("br")])]),a("h5",{attrs:{id:"多态"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#多态"}},[s._v("#")]),s._v(" 多态")]),s._v(" "),a("p",[s._v("在继承出现的情况下，存在多态。当多个或一个子类中重写了基类中的某个方法时，需要通过在父类被重写的方法前添加"),a("strong",[s._v("virtual")]),s._v("关键字，才能在子类调用方法的时候通过指针的方式在父类中寻找到对应子类的对应重写的方法。")]),s._v(" "),a("p",[s._v("这是静态链接")]),s._v(" "),a("p",[s._v("就是根据继承的方式，关系是定")]),s._v(" "),a("div",{staticClass:"language-c++ line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('class Shape {\n   protected:\n      int width, height;\n   public:\n      Shape( int a=0, int b=0)\n      {\n         width = a;\n         height = b;\n      }\n      virtual int area()\n      {\n         cout << "Parent class area :" <<endl;\n         return 0;\n      }\n};\nclass A: public shape{\n\tpublic:\n\t  int area()\n     \t {\n         \t子类a的方法\n      \t  }\n}\nclass B: public shape{\n\tpublic:\n\t  int area()\n     \t {\n         \t子类b的方法\n      \t  }\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br")])]),a("p",[s._v("虚函数")]),s._v(" "),a("p",[a("strong",[s._v("虚函数")]),s._v("是在基类中使用关键字 "),a("strong",[s._v("virtual")]),s._v(" 声明的函数。在派生类中重新定义基类中定义的虚函数时，会告诉编译器不要静态链接到该函数。")]),s._v(" "),a("p",[s._v("我们想要的是在程序中任意点可以根据所调用的对象类型来选择调用的函数，这种操作被称为 "),a("strong",[s._v("动态链接")]),s._v(" ，或 "),a("strong",[s._v("后期绑定")]),s._v(" 。")]),s._v(" "),a("p",[s._v("纯虚函数：= 0 告诉编译器，函数没有主体 "),a("code",[s._v("virtual int area() = 0;")])]),s._v(" "),a("h5",{attrs:{id:"接口-抽象类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#接口-抽象类"}},[s._v("#")]),s._v(" 接口（抽象类）")]),s._v(" "),a("p",[s._v("抽象类是至少有一个函数被声明为纯虚函数的类")]),s._v(" "),a("p",[s._v("它只能被其他类继承，不可实例化。可以理解为将一些比较通用的方法和属性归一，当子类继承时候必须重写方法才可以实例化")]),s._v(" "),a("h3",{attrs:{id:"文件和流"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#文件和流"}},[s._v("#")]),s._v(" 文件和流")]),s._v(" "),a("p",[s._v("输入和输出都是一个流")]),s._v(" "),a("p",[s._v("文件流")]),s._v(" "),a("p",[s._v("流（stream） 可以理解为一个专门存放东西的地方")]),s._v(" "),a("h3",{attrs:{id:"异常处理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#异常处理"}},[s._v("#")]),s._v(" 异常处理")]),s._v(" "),a("ul",[a("li",[a("strong",[s._v("throw:")]),s._v(" 当问题出现时，程序会抛出一个异常。这是通过使用 "),a("strong",[s._v("throw")]),s._v(" 关键字来完成的。")]),s._v(" "),a("li",[a("strong",[s._v("catch:")]),s._v(" 在您想要处理问题的地方，通过异常处理程序捕获异常。"),a("strong",[s._v("catch")]),s._v(" 关键字用于捕获异常。")]),s._v(" "),a("li",[a("strong",[s._v("try:")]),s._v(" "),a("strong",[s._v("try")]),s._v(" 块中的代码标识将被激活的特定异常。它后面通常跟着一个或多个 catch 块。")])]),s._v(" "),a("h3",{attrs:{id:"动态内存"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#动态内存"}},[s._v("#")]),s._v(" 动态内存")]),s._v(" "),a("p",[s._v("c使用的是mallloc()函数和free函数 来申请空间")]),s._v(" "),a("p",[s._v("c++可以使用new")]),s._v(" "),a("div",{staticClass:"language-c++ line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("double* pvalue  = NULL; // 初始化为 null 的指针\npvalue  = new double;   // 为变量请求内存\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[a("strong",[s._v("注意")]),s._v(" 使用new 关键字的时候需要注意如果可以申请的空间满了，需要对返回值进行判断")]),s._v(" "),a("p",[s._v("这个关键字还有一个作用就是创建对象")]),s._v(" "),a("p",[s._v("使用delet 关键代替free的功能释放内存空间")]),s._v(" "),a("h3",{attrs:{id:"命名空间"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#命名空间"}},[s._v("#")]),s._v(" 命名空间")]),s._v(" "),a("p",[s._v("就像python的包管理 和 js的闭包")]),s._v(" "),a("h3",{attrs:{id:"模板"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#模板"}},[s._v("#")]),s._v(" 模板")]),s._v(" "),a("p",[s._v("提供泛型能力")]),s._v(" "),a("p",[s._v("泛型--就是将原本只固定使用一种数据类型的方法和类拓展到多个-类型")]),s._v(" "),a("h4",{attrs:{id:"语法-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#语法-2"}},[s._v("#")]),s._v(" 语法")]),s._v(" "),a("p",[s._v("函数模板： 就是可以将同样的函数体用于处理不同类型的数据")]),s._v(" "),a("div",{staticClass:"language-c++ line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("template <typename type> ret-type func-name(parameter list)\n{\n   // 函数的主体\n}\n// 实例\ntemplate <typename T>\ninline T const& Max (T const& a, T const& b) \n{ \n    return a < b ? b:a; \n} \n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br")])]),a("p",[s._v("类模板： 就是将类和方法中属性的数值类型可以变")]),s._v(" "),a("div",{staticClass:"language-c++ line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("template <class T>\nclass Stack { \n  private: \n    vector<T> elems;     // 元素 \n \n  public: \n    void push(T const&);  // 入栈\n    void pop();               // 出栈\n    T top() const;            // 返回栈顶元素\n    bool empty() const{       // 如果为空则返回真。\n        return elems.empty(); \n    } \n}; \n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br")])]),a("h3",{attrs:{id:"多线程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#多线程"}},[s._v("#")]),s._v(" 多线程")]),s._v(" "),a("h3",{attrs:{id:"stl"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#stl"}},[s._v("#")]),s._v(" STL")]),s._v(" "),a("h4",{attrs:{id:"迭代器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#迭代器"}},[s._v("#")]),s._v(" 迭代器")]),s._v(" "),a("p",[s._v("迭代器就是一个类似于指针的对象")]),s._v(" "),a("p",[s._v("它会自动将数据中的东西逐个拿到想要的地方，可以顺逆")]),s._v(" "),a("h4",{attrs:{id:"容器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#容器"}},[s._v("#")]),s._v(" 容器")]),s._v(" "),a("p",[a("a",{attrs:{href:"https://blog.csdn.net/qq_40156159/article/details/115464132?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522166410707516782428630990%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall%255Fv2.%2522%257D&request_id=166410707516782428630990&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all_v2~first_rank_ecpm_v1~rank_v31_ecpm-2-115464132-null-null.142%5Ev50%5Econtrol_1,201%5Ev3%5Econtrol&utm_term=c%2B%2Bstl%E5%AE%B9%E5%99%A8&spm=1018.2226.3001.4187",target:"_blank",rel:"noopener noreferrer"}},[s._v(" 博客"),a("OutboundLink")],1),s._v("资料")]),s._v(" "),a("p",[s._v("容器是用来管理某一类对象的集合")]),s._v(" "),a("p",[s._v("可以理解为是将一些常用给的数据结构和它们的符合形式抽象成类，内部使用迭代器将一些操作封装成为接口")]),s._v(" "),a("h5",{attrs:{id:"顺序容器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#顺序容器"}},[s._v("#")]),s._v(" 顺序容器")]),s._v(" "),a("h6",{attrs:{id:"stack-堆栈"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#stack-堆栈"}},[s._v("#")]),s._v(" stack  -- 堆栈")]),s._v(" "),a("h6",{attrs:{id:"deque-双端队列"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#deque-双端队列"}},[s._v("#")]),s._v(" deque -- 双端队列")]),s._v(" "),a("ul",[a("li",[s._v("就是队头队尾都可以进行进出队列的操作")]),s._v(" "),a("li",[s._v("deque的迭代器并不是普通指针")])]),s._v(" "),a("h6",{attrs:{id:"queue-队列"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#queue-队列"}},[s._v("#")]),s._v(" queue -- 队列")]),s._v(" "),a("h6",{attrs:{id:"priority-queue-优先队列-堆"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#priority-queue-优先队列-堆"}},[s._v("#")]),s._v(" priority_queue -- 优先队列（堆）")]),s._v(" "),a("ul",[a("li",[s._v("普通的队列是一种先进先出的数据结构，元素在队列尾追加，而从队列头删除。在优先队列中，元素被赋予优先级")]),s._v(" "),a("li",[s._v("当访问元素时，具有最高优先级的元素最先出队的行为特征。")]),s._v(" "),a("li",[s._v("优先队列实现了类似堆的功能（其实底层就是用堆实现的）。")]),s._v(" "),a("li",[s._v("STL默认使用 <操作符来确定对象之间的优先级关系（也就是从大到小排序，默认大根堆）")]),s._v(" "),a("li",[s._v("优先队列的底层是用堆实现的。 在优先队列中默认存放数据的容器是vector，在声明时也可以用deque(双向队列)")]),s._v(" "),a("li",[s._v("没有迭代器，不提供遍历功能")])]),s._v(" "),a("h6",{attrs:{id:"list-循环双链表"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#list-循环双链表"}},[s._v("#")]),s._v(" list -- 循环双链表")]),s._v(" "),a("ul",[a("li",[s._v("有效利用空间")]),s._v(" "),a("li",[s._v("数据结构：环状双向链表")]),s._v(" "),a("li",[s._v("插入(insert)和接合(splice)操作都不会造成原来list的迭代器失效")]),s._v(" "),a("li",[s._v("删除（erase）操作仅仅使“指向被删除元素”的迭代器失效，其它迭代器不受影响")]),s._v(" "),a("li",[s._v("随机访问比较慢")]),s._v(" "),a("li",[s._v("任何位置元素的插入和删除，list是常数时间")])]),s._v(" "),a("h6",{attrs:{id:"vector-向量"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#vector-向量"}},[s._v("#")]),s._v(" vector  -- 向量")]),s._v(" "),a("ul",[a("li",[s._v("内存可2倍增长的动态数组")]),s._v(" "),a("li",[s._v("数据结构：线性连续空间")]),s._v(" "),a("li",[s._v("三个迭代器：start、finish、end_of_storage")]),s._v(" "),a("li",[s._v("在尾部插入和删除快，随即查找快。在前面或中间插入慢。")]),s._v(" "),a("li",[s._v("capability：为降低空间配置时的速度成本，vector实际配置的大小可能比初始化所需要的大，以便将来的扩充。")])]),s._v(" "),a("h6",{attrs:{id:"常见的操作-vector-其他的容器应该也有而且命名差不多"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#常见的操作-vector-其他的容器应该也有而且命名差不多"}},[s._v("#")]),s._v(" 常见的操作（vector 其他的容器应该也有而且命名差不多）")]),s._v(" "),a("ul",[a("li",[s._v("push_back( ) 成员函数在向量的末尾插入值，如果有必要会扩展向量的大小。")]),s._v(" "),a("li",[s._v("size( ) 函数显示向量的大小。")]),s._v(" "),a("li",[s._v("begin( ) 函数返回一个指向向量开头的迭代器。")]),s._v(" "),a("li",[s._v("end( ) 函数返回一个指向向量末尾的迭代器。")])]),s._v(" "),a("h5",{attrs:{id:"关联容器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#关联容器"}},[s._v("#")]),s._v(" 关联容器")]),s._v(" "),a("p",[s._v("set")]),s._v(" "),a("p",[s._v("map")]),s._v(" "),a("p",[s._v("hash map")])])}),[],!1,null,null,null);a.default=e.exports}}]);